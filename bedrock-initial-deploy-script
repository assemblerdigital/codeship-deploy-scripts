#######################################################################
#BEDROCK WORDPRESS INITIAL DEPLOYMENT SCRIPT 
#######################################################################
# ------------ CHANGE THESE VARIABLES TO CONFIGURE THE BELOW SCRIPT FOR ITS ENVIRONMENT. SHOULDN'T NEED TO CHANGE ANYTHING ELSE ------------
if [[ "$CI_BRANCH" == "release"* ]]; then USERNAME=$PRODUCTION_USERNAME; SERVER=$PRODUCTION_SERVER; fi
if [ "$CI_BRANCH" == "staging" ]; then USERNAME=$STAGING_USERNAME; SERVER=$STAGING_SERVER; fi
#setup required directories
ssh -t $USERNAME@$SERVER "mkdir -p /home/$USERNAME/build/ && mkdir -p /home/$USERNAME/vendor/ && mkdir -p /home/$USERNAME/build/vendor/ && mkdir -p /home/$USERNAME/config/ && mkdir -p /home/$USERNAME/backups/site/ && mkdir -p /home/$USERNAME/backups/database/"
# ------------ COPY THE BUILD FILES TO THE REMOTE ------------
#a tar pipe appears to be the fastest way to deploy the entire directory.
cd ~/clone/ && tar czf - . | ssh $USERNAME@$SERVER tar xvzfC - /home/$USERNAME/build/
# ------------ COMPLETE THE BUILD IN THE BUILD DIRECTORY ------------
#delete anything from the build directory that shouldn't be there.
ssh -t $USERNAME@$SERVER "if [ -f /home/$USERNAME/build/.git ]; then rm -rf /home/$USERNAME/build/.git; fi"
#set permissions within the build directory. Might need to lock this down more in future.
ssh -t $USERNAME@$SERVER "cd /home/$USERNAME/build/ && find . -type d -print0 | xargs -0 chmod 0755"
ssh -t $USERNAME@$SERVER "cd /home/$USERNAME/build/ && find . -type f -print0 | xargs -0 chmod 0644"
# ------------ DO THE FINAL SWITCH OVER FROM BUILD TO PUBLIC_HTML ------------
#empty the public_html directory. we're doing it this way because I have to keep the directory. SSHed in as a regular user, I don't have permissions to set the nobody group on the build dir to do a blue green swap.
ssh -t $USERNAME@$SERVER "cd /home/$USERNAME/public_html/ && rm -rf ..?* .[!.]* *"
#move the contents of the dirs we grabbed from the repo into place.
ssh -t $USERNAME@$SERVER "shopt -s dotglob && mv /home/$USERNAME/build/web/* /home/$USERNAME/public_html/"
ssh -t $USERNAME@$SERVER "rm -rf /home/$USERNAME/vendor && mv /home/$USERNAME/build/vendor /home/$USERNAME/"
ssh -t $USERNAME@$SERVER "rm -rf /home/$USERNAME/config && mv /home/$USERNAME/build/config /home/$USERNAME/"
